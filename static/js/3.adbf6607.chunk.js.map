{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","Select","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","ContactDate","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIndentifier","_this","order","orderData","ings","price","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancellenedHandler","history","goBack","checkoutContinuedHandler","replace","summary","react_router","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.adbf6607.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n    let inputElement = null\r\n    const inputClasses = [classes.InputElement]\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={classes.Select} value={props.value} onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    ))}\r\n                </select>\r\n            )\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__235-a\",\"Label\":\"Input_Label__2117w\",\"InputElement\":\"Input_InputElement__3zvTA\",\"Invalid\":\"Input_Invalid__1U69o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3QpgA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3wWma\",\"ContactDate\":\"ContactData_ContactDate__3hzyB\"};","import React from 'react'\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes excellent!</h1>\r\n            <div style={{ width: '100%', margin: 'auto' }}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL\r\n            </Button>\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE\r\n            </Button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default checkoutSummary","import React, { Component } from 'react'\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport classes from './ContactData.module.css'\r\nimport axios from '../../../Axios-orders'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\nimport { connect } from 'react-redux'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index'\r\nimport { updateObject, checkValidity } from '../../../shared/utility'\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zip Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' },\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault()\r\n        const formData = {}\r\n        for (let formElementIndentifier in this.state.orderForm) {\r\n            formData[formElementIndentifier] = this.state.orderForm[formElementIndentifier].value\r\n        }\r\n        const order = {\r\n            orderData: formData,\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token)\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        }) \r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        })\r\n        \r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid})\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = []\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n\r\n        let form = (<form onSubmit={this.orderHandler}>\r\n            {formElementsArray.map(formElement => (\r\n                <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n            ))}\r\n            <Button btnType=\"Success\" clicked={this.orderHandler} disabled={!this.state.formIsValid}>Order</Button>\r\n        </form>)\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios))","import React, { Component } from 'react'\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport ContactData from './ContactData/ContactData'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancellenedHandler = () => {\r\n        this.props.history.goBack()\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data')\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null\r\n            summary =\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancellenedHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>\r\n        }\r\n        return summary\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout)"],"sourceRoot":""}