{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","Select","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","ContactDate","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","C_Users_Wes_Desktop_BurgerBuilder_burgerbuilder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_8__","errorMessage","error","message","replace","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_13__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.6467f2b6.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n    let inputElement = null\r\n    const inputClasses = [classes.InputElement]\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select className={classes.Select} value={props.value} onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                    ))}\r\n                </select>\r\n            )\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__235-a\",\"Label\":\"Input_Label__2117w\",\"InputElement\":\"Input_InputElement__3zvTA\",\"Invalid\":\"Input_Invalid__1U69o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3Iqhc\",\"ContactDate\":\"Auth_ContactDate__2Rsrq\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { Redirect } from 'react-router-dom'\nimport { updateObject, checkValidity } from '../../shared/utility'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'email (enter dummy data)'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password (enter dummy data)'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath()\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        })\n        this.setState({ controls: updatedControls })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault()\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup }\n        })\n    }\n\n    render() {\n        const formElementsArray = []\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ))\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMessage = null\n        if (this.props.error) {\n            errorMessage = (\n                <p>{this.props.error.message.replace(/_/g, ' ')}</p>\n            )\n        }\n\n        let authRedirect = null\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">{this.state.isSignup ? 'SIGN UP' : 'SIGN IN'}</Button>\n                </form>\n                <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'}</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)"],"sourceRoot":""}